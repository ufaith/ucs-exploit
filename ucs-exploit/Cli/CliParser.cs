using System;
using System.Collections.Generic;
using System.Linq;

namespace UCS.Exploit.Cli
{
    public class CliParser
    {
        public CliParser()
        {
            Size = 5000;
            MasterHash = "f6d70976c986a10f9c5984b146cd6b6a4d3c61e2";
            Options = new List<CliOption>();
            Options.Add(new CliOption("help", "h", "displays this help message and exit", HandleHelpOption));
            Options.Add(new CliOption("size", "s", "size of the recursion", HandleSizeOption, CliHandling.Integer));
            Options.Add(new CliOption("masterhash", "m", "masterhash string needed for login", HandleMasterHashOption, CliHandling.String));
        }

        public List<CliOption> Options { get; set; }

        public int Size { get; set; }
        public string MasterHash { get; set; }

        public string Parse(string[] args)
        {
            for (int i = 0; i < args.Length; i++)
            {
                var argument = args[i];
                if (argument[0] == '-')
                {
                    // All Name and Alias of options starts with a '-' character.
                    if (argument.Length > 1 && argument[1] == '-')
                    {
                        // Its a Name of an option.
                        var name = argument.Substring(2);
                        var option = Options.Where(opt => opt.Name == name).FirstOrDefault();
                        if (option == null)
                        {
                            PrintHelp();
                            Console.WriteLine("ucs-exploit: error: unknown option name '--{0}'", name);
                            Environment.Exit(1);
                        }

                        if (option.Handling == CliHandling.Integer)
                        {
                            if (!(args.Length > i + 2))
                            {
                                PrintHelp();
                                Console.WriteLine("ucs-exploit: error: did not provide value for '--{0}'", name);
                                Environment.Exit(1);
                            }

                            var value = 0;
                            if (!int.TryParse(args[i + 1], out value))
                            {
                                PrintHelp();
                                Console.WriteLine("ucs-exploit: error: unvalid value for '--{0}', '{1}'", name, args[i + 1]);
                                Environment.Exit(1);
                            }
                            option.Handler(value);
                            i++;
                        }
                        else if (option.Handling == CliHandling.String)
                        {
                            if (!(args.Length > i + 2))
                            {
                                PrintHelp();
                                Console.WriteLine("ucs-exploit: error: did not provide value for '-{0}'", name);
                                Environment.Exit(1);
                            }

                            var value = args[i + 1];
                            option.Handler(value);
                            i++;
                        }
                        else
                        {
                            option.Handler();
                        }
                    }
                    else
                    {
                        // Its an Alias of an option.
                        var alias = argument.Substring(1);
                        var option = Options.Where(opt => opt.Alias == alias).FirstOrDefault();
                        if (option == null)
                        {
                            PrintHelp();
                            Console.WriteLine("ucs-exploit: error: unknown option alias '-{0}'", alias);
                            Environment.Exit(1);
                        }

                        if (option.Handling == CliHandling.Integer)
                        {
                            if (!(args.Length > i + 2))
                            {
                                PrintHelp();
                                Console.WriteLine("ucs-exploit: error: did not provide value for '-{0}'", alias);
                                Environment.Exit(1);
                            }

                            var value = 0;
                            if (!int.TryParse(args[i + 1], out value))
                            {
                                PrintHelp();
                                Console.WriteLine("ucs-exploit: error: unvalid value for '--{0}', '{1}'", alias, args[i + 1]);
                                Environment.Exit(1);
                            }
                            option.Handler(value);
                            i++;
                        }
                        else if (option.Handling == CliHandling.String)
                        {
                            if (!(args.Length > i + 2))
                            {
                                PrintHelp();
                                Console.WriteLine("ucs-exploit: error: did not provide value for '-{0}'", alias);
                                Environment.Exit(1);
                            }

                            var value = args[i + 1];
                            option.Handler(value);
                            i++;
                        }
                        else
                        {
                            option.Handler();
                        }
                    }
                }
                else
                {
                    return string.Join(" ", args, i, args.Length - i);
                }
            }

            // Print help and exit.
            PrintHelp();
            Console.WriteLine("ucs-exploit: error: did not provide any ip address");
            Environment.Exit(1);
            return null;
        }

        private void HandleSizeOption(params object[] parameters)
        {
            Size = (int)parameters[0];
        }

        private void HandleMasterHashOption(params object[] parameters)
        {
            MasterHash = (string)parameters[0];
        }

        private void HandleHelpOption(params object[] parameters)
        {
            PrintHelp();
            Environment.Exit(0);
        }

        private void PrintHelp()
        {
            Console.WriteLine("usage: ucs-exploit [-h] ip");
            Console.WriteLine();
            Console.WriteLine("\ta program that can crash ucs servers");
            Console.WriteLine();
            Console.WriteLine("optional arguments: ");

            for (int i = 0; i < Options.Count; i++)
            {
                var option = Options[i];
                if (option.Alias != null)
                {
                    Console.WriteLine("\t-{0}, --{1}{2}", option.Alias, option.Name.PadRight(15, ' '), option.Description);
                }
            }
        }
    }
}
