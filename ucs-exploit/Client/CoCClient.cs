using CoCSharp.Logic;
using CoCSharp.Networking;
using CoCSharp.Networking.Packets;
using System;
using System.Collections.Generic;
using System.Net;
using System.Net.Sockets;

namespace UCS.Exploit.Client
{
    public class CoCClient : IDisposable
    {
        private bool m_Disposed = false;

        #region Constructors & Destructors
        public CoCClient()
        {
            MasterHash = "f6d70976c986a10f9c5984b146cd6b6a4d3c61e2";
            Home = new Village();
            Avatar = new Avatar();
            Connection = new Socket(SocketType.Stream, ProtocolType.Tcp);
            PacketHandlers = new Dictionary<ushort, PacketHandler>();
            KeepAliveManager = new KeepAliveManager(this);

            LoginPacketHandlers.RegisterLoginPacketHandlers(this);
        }

        ~CoCClient()
        {
            Dispose(false);
        }
        #endregion

        #region Properties
        public bool LoggedIn { get; set; }
        public string MasterHash { get; set; }
        public bool Connected { get { return Connection.Connected; } }
        public Socket Connection { get; set; }
        public Village Home { get; set; }
        public Avatar Avatar { get; set; }
        public NetworkManagerAsync NetworkManager { get; set; }

        private KeepAliveManager KeepAliveManager { get; set; }
        private Dictionary<ushort, PacketHandler> PacketHandlers { get; set; }
        #endregion

        #region Methods
        public void Connect(IPEndPoint endPoint)
        {
            if (endPoint == null)
                throw new ArgumentNullException("endPoint");

            var args = new SocketAsyncEventArgs();
            args.Completed += ConnectAsyncCompleted;
            args.RemoteEndPoint = endPoint;
            Connection.ConnectAsync(args);
        }

        private void ConnectAsyncCompleted(object sender, SocketAsyncEventArgs e)
        {
            if (e.SocketError != SocketError.Success)
                throw new SocketException((int)e.SocketError);

            NetworkManager = new NetworkManagerAsync(e.ConnectSocket);
            NetworkManager.PacketReceived += OnPacketReceived;
            NetworkManager.Seed = new Random().Next();
            SendPacket(new LoginRequestPacket()
            {
                UserID = Avatar.ID,
                UserToken = Avatar.Token,
                ClientMajorVersion = 7,
                ClientContentVersion = 12,
                ClientMinorVersion = 200,
                FingerprintHash = MasterHash,
                OpenUDID = "563a6f060d8624db",
                MacAddress = null,
                DeviceModel = "GT-I9300",
                LocaleKey = 2000000,
                Language = "en",
                AdvertisingGUID = "",
                OSVersion = "4.0.4",
                IsAdvertisingTrackingEnabled = false,
                AndroidDeviceID = "563a6f060d8624db",
                FacebookDistributionID = "",
                VendorGUID = "",
                Seed = NetworkManager.Seed
            });
            KeepAliveManager.Start();
        }

        public void SendChatMessage(string message)
        {
            SendPacket(new ChatMessageClientPacket()
            {
                Message = message
            });
        }

        public void SendPacket(IPacket packet)
        {
            if (packet == null)
                throw new ArgumentNullException("packet");
            if (NetworkManager == null)
                throw new InvalidOperationException("Tried to send a packet before NetworkManager was initialized or before socket was connected.");

            NetworkManager.SendPacket(packet);
        }

        internal void RegisterDefaultPacketHandler(IPacket packet, PacketHandler handler)
        {
            if (packet == null)
                throw new ArgumentNullException("packet");
            if (handler == null)
                throw new ArgumentNullException("handler");

            PacketHandlers.Add(packet.ID, handler);
        }

        private void OnPacketReceived(object sender, PacketReceivedEventArgs e)
        {
            if (e.Exception == null)
            {
                try
                {
                    var handler = (PacketHandler)null;

                    if (PacketHandlers.TryGetValue(e.Packet.ID, out handler))
                        handler(this, e.Packet); // use default handler
                }
                catch { }
            }
        }
        #endregion

        #region Events
        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        private void Dispose(bool disposing)
        {
            if (m_Disposed)
                return;

            if (disposing)
            {
                KeepAliveManager.Dispose();
                NetworkManager.Dispose();

                PacketHandlers.Clear();
            }

            m_Disposed = true;
        }
        #endregion
    }
}
